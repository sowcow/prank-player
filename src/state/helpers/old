import points from './helpers/points'
import treeRoot from './tree/treeRoot'


// constants
//
const KEY = ['some', 'ui']


// boilerplate
//
var branch
let addBranch = nestedAt(treeRoot, KEY)


// branches definition
//
branch = addBranch('open', false) // key, default value
export const newEntriesIsOpen = branch()  // getter
export const newEntriesSetOpen = branch(  // action
  (state, _given) => state.set(true)
)
export const newEntriesSetClose = branch(
  (state, _given) => state.set(false)
)

branch = addBranch('news', [])
export const newEntriesList = branch()
export const newEntriesSet = branch(
  (state, given) => state.set(given)
)
export const newEntriesClear = branch(
  (state, _given) => state.set([])
)


// no need yet
//
export default null

/*
const defaultState = {
  newEntriesList: [],
  newEntriesIsOpen: false
}


// local reusables
//
let state = treeRoot.select(KEY)
let reads = (a, b = null) => points(a, KEY.concat(b || a))


// initialization
//
state.exists() && console.log('rewriting the key!:', KEY)
state.set(defaultState)


// simple actions
//
export const setNewEntriesOpen = () => state.set('newEntriesIsOpen', true)
export const setNewEntriesClose = () => state.set('newEntriesIsOpen', false)

// reading
//
export const newEntriesIsOpen = reads('newEntriesIsOpen')
export const newEntriesList = reads('newEntriesList')
*/




// RND
//

function nestedAt(treeRoot, path) {
  return (key, defaultValue) => addBranch_(treeRoot, path.concat(key), defaultValue)
}

function addBranch_(treeRoot, path, defaultValue) {
  let state = treeRoot.select(path)
  let reads = (a, b = null) => points(a, path.concat(b || a))

  state.exists() && console.log('rewriting the key!:', KEY)
  state.set(defaultValue)

  return function(givenFunction = null) {
    if (givenFunction == null) {
      state
    } else {
      return function(tree, ...givenParams) {
        givenFunction(state, ...givenParams)
      }
    }
  }
}


// usage
//



/*
class Branch {
  constructor(subtree, path, defaultValue) {
    this.path = path
    this.defaultValue = defaultValue

    let state = subtree.select(this.path)
    let reads = (a, b = null) => points(a, KEY.concat(b || a))
  }

  action() {
  }

  getter() {
    reads
  }
}
*/
