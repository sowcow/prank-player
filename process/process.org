#+TODO: TODO(t) WIP(w) | DONE(d) NOPE(n)
#+TAGS: home(h) work(w) @computer(c) @phone(p) errants(e)
#+STARTUP: indent
#+STARTUP: hidestars

NOTE: the structure of this file is not subject to change or experiments!
(KISS)

* todos
- [X] cucumber runs tests
  nothing unusual - just copied previous rspec stuff
- [X] decide what is the state that is saved - are files included?
  so: global state - maybe also current working directory
      it points to a "new" clear dir at the start of each scenario
      stuff gets copied there when scenario continues another snapshot
      and it gets copied itself when new snapshot is created
      application state is a file inside it "application_state.json"
      other files take new subdirectories
- [X] try allure, see if you can create widgets to open the app at each state
  the existing libs are outdated and cucumber is going to hit new major version
  so storybook looks good for certain states to inspect
  and it is best to wait with allure-cucumber
  if allure is worthy then probably I should check its and cucumbers code
  when cucumber is stabilized
- [X] cleanup: cucumber
- [X] cucumber writes state data when it is stated
- [X] uploads are part of the data
  two steps for uploading: 1 - generate files, 2 - upload them
  in future one should save a file there, add other mp3s
  and then upload from the initial state to make assertions
- [X] cucumber loads saved data when it is stated
- [X] use project temp directory
- [X] storybook loads and previews the app at the saved states
- [X] audio previewing TDD way
- [X] to have a static audio + storybook test entry to play audio
- [X] more complete storybook test
- [X] use real player (not completely testable)
  so there are <Audio /> components that preload audio or so
  and you can have a ref on them to play it?
  they can use a service that ensures that only one is playing at a time
- [X] fix selenuim with docker
- [X] interact.js - storybook page
- [X] can arrange items
- [X] check coordinates
- [X] check look
- [X] fabric has it's own state
  - [X] no need to be notified about state change
  - [X] but I should write fileName into that state
  - [X] I should see new attributes in serailization
  - [X] so I only add things on doArrange
- [X] can rearrange items
- [X] can edit text
- [X] can delete
- [X] kind of strange way to handle state at this point - multiple lists 
- [X] NOPE: new entries are calculated
- [X] can play sound from the sound-board
- [X] snap
- [X] the menu is back
- [X] can download arrrangement file from the menu
  fabric: ..., positionedEntries, newEntries
- [X] can upload the saved file
- [X] audio is playing?
- [X] process added/deleted files
  - [X] test data
  - [X] passing
- [X] can choose sound output device
  - [X] ui
  - [X] options
  - [X] effect
    - [X] state
    - [X] targets
  - [X] status
- [ ] can upload svg, images
- [ ] git pages page is there, handle service worker
- [ ] tweaks
  - [ ] for added entries use last performed scale/rotation or
    just use values from last edited entry
  - [ ] preview is always by right click
  - [ ] normal mode with no editing and fixed play/pause behavior
- [ ] go back to tdd
* notes
** on this file
I'll try this as a todo list and maybe even activity tracker!
Also for random notes.
But more static things should go into readme or so.
Also there are entries that do not contribute to scenarios.
Scenario entries should be more distinct somehow.
** ui ideas
- fabric.js drawn dragged entry for arrangement
- nested bubbles or so - clipped groups?
  there is a problem with mouse interactions
  and animation for clipping area + border
  also use selectable: false
** other ideas and thoughts
- [ ] uids seems useless since filenames are unique
- [ ] ?to save screenshots in these directories as well
  so I can view them in the storybook?
  
